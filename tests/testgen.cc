#include <stdio.h>
#include <assert.h>

#define RVINTRIN_EMULATE
#include "rvintrin.h"
#include "test_zbb.c"
#include "test_zbs.c"
#include "test_zbp.c"
#include "test_zbe.c"
#include "test_zbc.c"
#include "test_zbr.c"
#include "test_zbm.c"
#include "test_zbt.c"
#include "test_zbf.c"
#include "test_stdc.c"

uint64_t args[128];

uint64_t xorshift64()
{
	static uint64_t x64 = 88172645463325252ull;
	x64 ^= x64 << 13;
	x64 ^= x64 >> 7;
	x64 ^= x64 << 17;
	return x64;
}

void init_args()
{
	int argp = 0;

	args[argp++] = 0;
	args[argp++] = 1;
	args[argp++] = -1;
	args[argp++] = 1LL << 63;

	int i = 2 + (xorshift64() & 7);
	while (i < 63) {
		assert(argp < 128);
		args[argp++] = 1LL << i;
		i += 1 + (xorshift64() & 7);
	}

	for (int i = 4; i < 64; i += 4) {
		assert(argp < 127);
		args[argp++] = xorshift64() & ((1LL << i)-1);
		args[argp++] = xorshift64() & _rv64_grev((1LL << i)-1, -1);
	}

	while (argp < 128) {
		args[argp++] = xorshift64();
	}
}

int main()
{
	init_args();

	printf("// generated by testgen.cc\n");
	printf("#include <stdio.h>\n");
	printf("#include \"rvintrin.h\"\n");
	printf("#include \"test_zbb.c\"\n");
	printf("#include \"test_zbs.c\"\n");
	printf("#include \"test_zbp.c\"\n");
	printf("#include \"test_zbe.c\"\n");
	printf("#include \"test_zbc.c\"\n");
	printf("#include \"test_zbr.c\"\n");
	printf("#include \"test_zbm.c\"\n");
	printf("#include \"test_zbt.c\"\n");
	printf("#include \"test_zbf.c\"\n");
	printf("#include \"test_stdc.c\"\n");
	printf("uint64_t args[128] = {\n");
	for (int i = 0; i < 128; i++) {
		printf("  0x%016llxLL%s\n", (long long)args[i], i < 127 ? "," : "");
	}
	printf("};\n");
	printf("int main()\n");
	printf("{\n");

#define RUN_TEST(_tst) \
	printf("  printf(\"%-9s\");\n", "test_" #_tst); \
	printf("  fflush(stdout);\n"); \
	uint64_t test_ ## _tst ## _result = test_ ## _tst (args, 128); \
	printf("  long test_" #_tst "_result = test_" #_tst "(args, 128);\n"); \
	printf("  printf(\" 0x%%08lx %%s\\n\", (long)test_" #_tst "_result, test_" #_tst "_result == 0x%08lx ? \"OK\" : \"ERROR\");\n", (long)test_ ## _tst ## _result); \
	printf("  if (test_" #_tst "_result != 0x%08lx) return 1;\n", (long)test_ ## _tst ## _result);

	RUN_TEST(zbb)
	RUN_TEST(zbs)
	RUN_TEST(zbp)
	RUN_TEST(zbe)
	RUN_TEST(zbc)
	RUN_TEST(zbr)
	RUN_TEST(zbm)
	RUN_TEST(zbt)
	RUN_TEST(zbf)
	RUN_TEST(stdc)

	printf("  printf(\"ALL TESTS PASSED.\\n\");\n");
	printf("  return 0;\n");
	printf("}\n");

	return 0;
}
